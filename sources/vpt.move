// Copyright (c) 2023, Vivid Network Contributors
// SPDX-License-Identifier: Apache-2.0

/// Vpt stands for "value per token". This module is used for do some computation
/// to some data that attached with the token amount.
module suiswap::vpt {
    /// Overflow occurs in the computation
    // const EVptComputationOverflow: u64 = 18400;
    /// Some opeartions could not support zero
    const EVptZeroEncountering: u64 = 18301;

    // const U64_MAX_256: u256 = 18446744073709551615;
    // const U128_MAX_256: u256 = 340282366920938463463374607431768211455;

    // #[test_only] use std::debug::print;

    struct ValuePerToken has store, copy, drop {
        /// The sum value of the value of token
        sum: u256,
        /// The amount of the value of the token
        amount: u256,
    }

    public fun vpt(sum: u256, amount: u256): ValuePerToken {
        assert!((sum == 0 || amount > 0), EVptZeroEncountering);
        ValuePerToken { sum: sum, amount: amount }
    }

    public fun zero(): ValuePerToken {
        vpt(0, 0)
    }

    public fun sum(v: &ValuePerToken): u256 { v.sum }
    public fun amount(v: &ValuePerToken): u256 { v.amount }

    /// Get the actual value of the value per token
    public fun value(v: &ValuePerToken): u256 {
        if (v.sum == 0 && v.amount == 0) {
            0 
        } else { 
            v.sum / v.amount 
        }
    }

    public fun add_sum(v: &mut ValuePerToken, value: u256) {
        assert!(v.amount > 0, EVptZeroEncountering);
        v.sum = v.sum + value;
    }

    public fun dec_sum(v: &mut ValuePerToken, value: u256) {
        assert!(v.amount > 0, EVptZeroEncountering);
        v.sum = v.sum - value;
    }

    public fun add_amount(v: &mut ValuePerToken, amount: u256) {
        // sum' = sum * amount' // amount <= sum * amount' / amount
        // sum' / amount' <= sum / amount
        let amount_ = v.amount + amount;
        let sum_ = if (v.amount > 0) { v.sum * amount_ / v.amount } else { 0 };
        v.sum = sum_;
        v.amount = amount_;
    }

    public fun dec_amount(v: &mut ValuePerToken, amount: u256) {
        // sum' = sum * amount' // amount <= sum * amount' / amount
        // sum' / amount' <= sum / amount
        let amount_ = v.amount - amount;
        let sum_ = if (v.amount > 0) { v.sum * amount_ / v.amount } else { 0 };
        v.sum = sum_;
        v.amount = amount_;
    }

    
    public fun diff(v1: &ValuePerToken, v2: &ValuePerToken, mul: u256): u256 {
        // The actual value is (s1 a2 - s2 a1) / (a1 a2)
        let (s1, a1) = if (v1.amount == 0 && v1.sum == 0) { (0, 1) } else { (v1.sum, v1.amount) };
        let (s2, a2) = if (v2.amount == 0 && v2.sum == 0) { (0, 1) } else { (v2.sum, v2.amount) };
        let n1 = s1 * a2;
        let n2 = s2 * a1;
        let d = a1 * a2;
        let res: u256 = if (n1 >= n2) { (n1 - n2) * mul / d } else { 0 };
        res
    }


    /* 
        The following test case is generated by the following Python code

            import random

            U256_MAX = (2 ** 256 - 1)

            def random_vpt():
                sum = random.randrange(0, U256_MAX // 2)
                amount = random.choice([
                    random.randrange(1, min(sum, 10000000000)),
                    random.randrange(1, U256_MAX)
                ])
                if (random.random() > 0.8):
                    return (0, 0)
                return (sum, amount)

            def once() -> bool:
                v1 = random_vpt()
                s = random.randrange(0, v1[0] + 1)

                if (v1[0] == 0 and v1[1] == 0):
                    return False
                
                title = random.choice(["add_sum", "dec_sum"])

                print(
                    f"let v1 = vpt({v1[0]}, {v1[1]}); {title}(&mut v1, {s}); assert!(v1.sum == { (v1[0] + s) if (title == 'add_sum') else (v1[0] - s)} && v1.amount == {v1[1]}, 0);"
                )

                return True

            for _ in range(30):
                while (not once()):
                    pass
    */
    #[test] fun t_vpt_add_dec_sum() {
        let v1 = vpt(14588821654402139066594352266188630859832391687538197994061054180251151172816, 67458850130313463845137005121670691792110702535815820592698052484730960387663); add_sum(&mut v1, 12338431543923365363492187088844013337179409325925800477809675919470864061272); assert!(v1.sum == 26927253198325504430086539355032644197011801013463998471870730099722015234088 && v1.amount == 67458850130313463845137005121670691792110702535815820592698052484730960387663, 0);
        let v1 = vpt(4488954389304030764712260948610711676232924836996083502113351842072327279013, 92342302805381352027025877303692444036238333530755804369182838469156258477595); dec_sum(&mut v1, 1404430897589067883843879403192313488749659240731700518797031068985517731701); assert!(v1.sum == 3084523491714962880868381545418398187483265596264382983316320773086809547312 && v1.amount == 92342302805381352027025877303692444036238333530755804369182838469156258477595, 0);
        let v1 = vpt(53522557874848870338575512553548063658722210879060622739522174875624179337989, 9799918290); add_sum(&mut v1, 9758809438949201179001065801407907626010995756281664288078466112664738011738); assert!(v1.sum == 63281367313798071517576578354955971284733206635342287027600640988288917349727 && v1.amount == 9799918290, 0);
        let v1 = vpt(20362060078196420195472680087116734734000112972849081035063156458451798900567, 7306872568); dec_sum(&mut v1, 10606526619960593411321753173738297194347086246683161753109601976558775441533); assert!(v1.sum == 9755533458235826784150926913378437539653026726165919281953554481893023459034 && v1.amount == 7306872568, 0);
        let v1 = vpt(3723442113500326511766962067053743345518350345351792641925370621990800356703, 5334689178); add_sum(&mut v1, 3641809044346297607866529065115760982920777266216867615360372174970840164089); assert!(v1.sum == 7365251157846624119633491132169504328439127611568660257285742796961640520792 && v1.amount == 5334689178, 0);
        let v1 = vpt(25375430495491721366809549551178826934015669262905551367701083252585701082379, 3278466611); dec_sum(&mut v1, 24904550595684140866525462065634269071716173807344828159083351565035790582618); assert!(v1.sum == 470879899807580500284087485544557862299495455560723208617731687549910499761 && v1.amount == 3278466611, 0);
        let v1 = vpt(52308967201977851268899193554127916032640598550544033766650649741028261599415, 93199617527460529424784435648780951546466805434623664852236330348690695694528); add_sum(&mut v1, 28624982583666548127430394985194093099717612992803313584466571254915218007214); assert!(v1.sum == 80933949785644399396329588539322009132358211543347347351117220995943479606629 && v1.amount == 93199617527460529424784435648780951546466805434623664852236330348690695694528, 0);
        // let v1 = vpt(52424760159234489759372683901978813462544403716117066068954623475725943104018, 797908280); dec_sum(&mut v1, 27879602453084536636722066062085398755317419389589904726493462816038448887339); assert!(v1.sum == 24545157706149953122650617839893414707226984326527161342461160659687494216679 && v1.amount == 797908280, 0);
        // let v1 = vpt(28143773989652796176621274160020804686857242905360787642946478961865965443699, 4664951441); add_sum(&mut v1, 24707477989596865429019922745056183609972405339317910866499856019791502071226); assert!(v1.sum == 52851251979249661605641196905076988296829648244678698509446334981657467514925 && v1.amount == 4664951441, 0);
        // let v1 = vpt(28454777290770726327763030057609743393334999065849915202417384494376141430460, 7425610946); add_sum(&mut v1, 8980117546951781229093874730356185468563947819648571205618153964704220595734); assert!(v1.sum == 37434894837722507556856904787965928861898946885498486408035538459080362026194 && v1.amount == 7425610946, 0);
        // let v1 = vpt(36140913555933920101085105998003697212571953978051690065759487417709721389014, 4598184267); add_sum(&mut v1, 11710190341006612818620792005454684081004025605333195436168070264306669830475); assert!(v1.sum == 47851103896940532919705898003458381293575979583384885501927557682016391219489 && v1.amount == 4598184267, 0);
        // let v1 = vpt(1752054376611506443038426327840545711830433271606402544830995311928323417368, 4756121155); dec_sum(&mut v1, 1549953193738517552408435807386941756192999142102465200300847974930873831977); assert!(v1.sum == 202101182872988890629990520453603955637434129503937344530147336997449585391 && v1.amount == 4756121155, 0);
        // let v1 = vpt(44781336710141136520491778976033817064333660749012293578475534801019264767577, 45005933162964450894040273435707493588340199579115418339514664112594044033769); add_sum(&mut v1, 29329711047789541696357119020830741306017989219894753701732669777266828355427); assert!(v1.sum == 74111047757930678216848897996864558370351649968907047280208204578286093123004 && v1.amount == 45005933162964450894040273435707493588340199579115418339514664112594044033769, 0);
        // let v1 = vpt(11798699199145454807880398313771912915237429657271912356266045125450720718203, 8817576170); add_sum(&mut v1, 7357878120774376165888186279153676227284831132684776486669902509993370783649); assert!(v1.sum == 19156577319919830973768584592925589142522260789956688842935947635444091501852 && v1.amount == 8817576170, 0);
        // let v1 = vpt(27187299651377927415076650962738875962948961709179251379182780517959240104458, 71962279611237936649686070383678867403995772332403517248794811515410906129813); dec_sum(&mut v1, 25346754924638713764211000462896223780401453860227836914026473335298782972844); assert!(v1.sum == 1840544726739213650865650499842652182547507848951414465156307182660457131614 && v1.amount == 71962279611237936649686070383678867403995772332403517248794811515410906129813, 0);
        // let v1 = vpt(17225415011221585749356769445724822418484354584115950526095534780376203277601, 17425312700419878073190615142706597316981557752159977907522405763526084999033); dec_sum(&mut v1, 10228259510465100739276039285386227866676620385964540902061206553093735881293); assert!(v1.sum == 6997155500756485010080730160338594551807734198151409624034328227282467396308 && v1.amount == 17425312700419878073190615142706597316981557752159977907522405763526084999033, 0);
        // let v1 = vpt(23496294976376848578086070107605557395203517132052430598842307318523688248493, 67541993171703478927481786181131440098010150867582369679483205385369835092314); add_sum(&mut v1, 20048134444048297020282491004447878136902654822196323513986688905174948259521); assert!(v1.sum == 43544429420425145598368561112053435532106171954248754112828996223698636508014 && v1.amount == 67541993171703478927481786181131440098010150867582369679483205385369835092314, 0);
        // let v1 = vpt(38041459342116825126115711753622518125336505167982537145250541403370251053375, 112625389207456617743621756484482788845069958912810997332162557766449384732111); add_sum(&mut v1, 33961184437627568804564405386206711561982832822631737971918627612398873724614); assert!(v1.sum == 72002643779744393930680117139829229687319337990614275117169169015769124777989 && v1.amount == 112625389207456617743621756484482788845069958912810997332162557766449384732111, 0);
        // let v1 = vpt(42372774706268462754642452876145847655184656376938871983705809496108529790352, 7337607712); add_sum(&mut v1, 41999744053632831161186867979575664588018133976046237413689526906878462828745); assert!(v1.sum == 84372518759901293915829320855721512243202790352985109397395336402986992619097 && v1.amount == 7337607712, 0);
        // let v1 = vpt(17733376174986628894921745641391223815874792295712208609562160561543105466268, 5711005718); add_sum(&mut v1, 12141613931973202617238548584863031639591206529324808567102596764753620534739); assert!(v1.sum == 29874990106959831512160294226254255455465998825037017176664757326296726001007 && v1.amount == 5711005718, 0);
        // let v1 = vpt(39775741996137041352405827030326371827972057418676394565774093905325311597501, 81154321518770555131977762545950248457742787760506453236214229607005351475841); dec_sum(&mut v1, 562654683251261319716764024375019291784084766691506008253423498831662992691); assert!(v1.sum == 39213087312885780032689063005951352536187972651984888557520670406493648604810 && v1.amount == 81154321518770555131977762545950248457742787760506453236214229607005351475841, 0);
        // let v1 = vpt(46383582442142439562831783634251682152271478872378155084112627990263225090219, 83104600224031290498122917883082474207989691137961955475777632463590075485213); dec_sum(&mut v1, 8984116737596070668207783183843573812428265288436051035199413642786517893999); assert!(v1.sum == 37399465704546368894624000450408108339843213583942104048913214347476707196220 && v1.amount == 83104600224031290498122917883082474207989691137961955475777632463590075485213, 0);
        // let v1 = vpt(15990797294963924352647262903707898244618107447637970324954282886435315469886, 25629997506202960879201714508250513629943319101615630555537399324980464974533); add_sum(&mut v1, 7026008874824240865879490383064251470995182524195092748333820634509271767785); assert!(v1.sum == 23016806169788165218526753286772149715613289971833063073288103520944587237671 && v1.amount == 25629997506202960879201714508250513629943319101615630555537399324980464974533, 0);
        // let v1 = vpt(37957773528781851763889358874767906525625723875554650438037073425244754410332, 2297265490); add_sum(&mut v1, 29354194749302708991799104403624187686319303535038129539266037997905320517565); assert!(v1.sum == 67311968278084560755688463278392094211945027410592779977303111423150074927897 && v1.amount == 2297265490, 0);
        // let v1 = vpt(1796976947771132134864686654786236244643232920225658986944212820378418252870, 1799970631); dec_sum(&mut v1, 40309433417274251807738212526763018704744857176539661433199310878073657309); assert!(v1.sum == 1756667514353857883056948442259473225938488063049119325511013509500344595561 && v1.amount == 1799970631, 0);
        // let v1 = vpt(37217123221349623482534006691398345546337909027654062042483596811686069533211, 3762561561); add_sum(&mut v1, 1823733842262286681575808897573184168203003983585160495366788534969975639674); assert!(v1.sum == 39040857063611910164109815588971529714540913011239222537850385346656045172885 && v1.amount == 3762561561, 0);
        // let v1 = vpt(16994255048067455605545237003381358849289927183396478591823859876963478633788, 17764298351899487685558413349071644248433940459648095753173157624522516011124); add_sum(&mut v1, 6915581820044564789287748833931528664096039118365549673045419887341718981581); assert!(v1.sum == 23909836868112020394832985837312887513385966301762028264869279764305197615369 && v1.amount == 17764298351899487685558413349071644248433940459648095753173157624522516011124, 0);
        // let v1 = vpt(46980453929909165548013646377124124222516995887529198253762231673211499144742, 91094059054491505264826168528785210649819734871700774134131048395024693378972); add_sum(&mut v1, 22660957452260290712738866363130734747260990383056311023846246304132936305485); assert!(v1.sum == 69641411382169456260752512740254858969777986270585509277608477977344435450227 && v1.amount == 91094059054491505264826168528785210649819734871700774134131048395024693378972, 0);
        // let v1 = vpt(2159915084256524995630966836474248396767981232477744473330362876675338537142, 9610856754); dec_sum(&mut v1, 1188506396798443744756517606431212354667367566335315429836983792378782279139); assert!(v1.sum == 971408687458081250874449230043036042100613666142429043493379084296556258003 && v1.amount == 9610856754, 0);
        // let v1 = vpt(54396693131731885172374647461989201137120292265071219711797125176062006906525, 5617106846); dec_sum(&mut v1, 39572589065413302684910904573119902365840639279215260909847934390162588851073); assert!(v1.sum == 14824104066318582487463742888869298771279652985855958801949190785899418055452 && v1.amount == 5617106846, 0);
    }

    /* 
        The following test case is generated by the following Python code
        
            import random

            U256_MAX = (2 ** 256 - 1)

            def random_vpt():
                sum_ = random.randrange(0, U256_MAX // 2)
                amount = random.choice([
                    random.randrange(1, min(sum_, 10000000000)),
                    random.randrange(1, U256_MAX // 2)
                ])
                if (random.random() > 0.9):
                    return (0, 0)
                return (sum_, amount)

            def random_vpt_small():
                sum_ = random.randrange(0, 2 ** 128)
                amount = random.choice([
                    random.randrange(1, min(sum_, 10 ** 17)),
                    random.randrange(1, min(sum_, 10)),
                    random.randrange(1, min(sum_, 10000)),
                    random.randrange(1, min(sum_, 2 ** 64)),
                ])
                if (random.random() > 0.9):
                    return (0, 0)
                return (sum_, amount)

            def once() -> bool:
                v1 = random_vpt_small()
                s = random.choice([
                    random.randrange(1, 10 ** 17),
                    random.randrange(1, 10),
                    random.randrange(1, 10000),
                    random.randrange(1, 2 ** 64),
                    v1[1]
                ])
                
                title = random.choice(["add_amount", "dec_amount"])
                if title == "dec_amount" and v1[1] < s:
                    return False

                print(
                    f"let v1 = vpt({v1[0]}, {v1[1]}); let v2 = copy v1; {title}(&mut v1, {s}); assert!(value(&v1) <= value(&v2), 0);"
                )

                return True

            for _ in range(70):
                while (not once()):
                    pass
    */
    #[test] fun t_vpt_add_dec_amount() {
        let v1 = vpt(47663983865972305161790272488230268105, 2708451591439020); let v2 = copy v1; add_amount(&mut v1, 6166705614460974841); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(321236637633076500382151180759428851959, 9304285248516585682); let v2 = copy v1; add_amount(&mut v1, 5); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(18450781434144918455223982363772349209, 9881744333353784475); let v2 = copy v1; dec_amount(&mut v1, 5); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(2820220780651474599811556745221524634, 3883186125784456093); let v2 = copy v1; dec_amount(&mut v1, 1377097101350899779); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(182315684403434434930561207143554379790, 2947229326484140); let v2 = copy v1; add_amount(&mut v1, 68685583349725614); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(252970006438380007133793453650338514470, 3); let v2 = copy v1; add_amount(&mut v1, 3623981892172878726); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(129077194346318610157467414855603541271, 15190818317139522); let v2 = copy v1; dec_amount(&mut v1, 15190818317139522); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 7045); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(327430291194832205663299571057822910365, 10326971918019589639); let v2 = copy v1; add_amount(&mut v1, 6); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(229838313691126076941031727584313187415, 2); let v2 = copy v1; dec_amount(&mut v1, 2); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(295568252944840122965222274153435439445, 9237); let v2 = copy v1; dec_amount(&mut v1, 9237); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(16376963523639401041187070414821711643, 4547); let v2 = copy v1; dec_amount(&mut v1, 4547); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(96261554938235143598805869249122880811, 4); let v2 = copy v1; add_amount(&mut v1, 9132021484481924181); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(13975709669889945671759337934686149931, 8); let v2 = copy v1; add_amount(&mut v1, 15232806151917396270); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(280556527901821986118382236498584020157, 2887596809188682132); let v2 = copy v1; dec_amount(&mut v1, 79118268989318784); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(327083583658108880032656367857663847132, 57454356113882921); let v2 = copy v1; dec_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(207076033551424719040606360054943558731, 1); let v2 = copy v1; dec_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(238854945211111303289399749893183774893, 27425319185686021); let v2 = copy v1; add_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(122344875690015032569095543101028073664, 2986); let v2 = copy v1; add_amount(&mut v1, 13710860814030503631); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(85388931168390590959734527480703577799, 9299437027733350336); let v2 = copy v1; add_amount(&mut v1, 9299437027733350336); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(51682402070794574473455816655443616372, 9472); let v2 = copy v1; add_amount(&mut v1, 11886596391058968417); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(119801456549452640654439965948028744017, 13697874191734977); let v2 = copy v1; add_amount(&mut v1, 6564399088990734109); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(57934343384481199469130386744913064631, 14815504596635250713); let v2 = copy v1; add_amount(&mut v1, 16064594505217848418); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(124858569808376189798017673236622935332, 1); let v2 = copy v1; dec_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(191367473504554713720311631737517685548, 2); let v2 = copy v1; dec_amount(&mut v1, 2); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(170576504808229211132409093051468712664, 8); let v2 = copy v1; add_amount(&mut v1, 8); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(296964603328293156321815886060636272110, 3); let v2 = copy v1; dec_amount(&mut v1, 3); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(48601640736689343468821477926165600724, 14787522253144240); let v2 = copy v1; add_amount(&mut v1, 6); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 25599419403496857); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(320331055441475374733295219691044207787, 8); let v2 = copy v1; add_amount(&mut v1, 7425); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(160076067972563018094750936226616539406, 67585674187877353); let v2 = copy v1; dec_amount(&mut v1, 67585674187877353); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(74220742049994952263987271956460729027, 1); let v2 = copy v1; add_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(110424391956408606407411216749733560587, 1222); let v2 = copy v1; add_amount(&mut v1, 35515419225117598); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(339043794365584927329767882595024789451, 3194561331144975833); let v2 = copy v1; add_amount(&mut v1, 3409); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(326728043062312193081909577892650871708, 47502742150012438); let v2 = copy v1; add_amount(&mut v1, 33191743290871526); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(226850722676536507260833705901331389746, 3); let v2 = copy v1; dec_amount(&mut v1, 3); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(215540262748640417776977860784437479844, 5); let v2 = copy v1; add_amount(&mut v1, 9085297301902369027); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(221552830472557205877281786987527655075, 3872); let v2 = copy v1; add_amount(&mut v1, 3872); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(314622664767516871625419394946151923188, 12528196126425808308); let v2 = copy v1; dec_amount(&mut v1, 4468); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(117346470050759136756740938778242270720, 5); let v2 = copy v1; add_amount(&mut v1, 5); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(129663100950916030379330671070916258158, 4528); let v2 = copy v1; add_amount(&mut v1, 4176); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(115543702847316211429394104162518404995, 2871105084256738416); let v2 = copy v1; dec_amount(&mut v1, 4074); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(225435504111482007132812789991447973000, 3117); let v2 = copy v1; dec_amount(&mut v1, 9); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(283922427760762291235359535460225614454, 38860269904372818); let v2 = copy v1; add_amount(&mut v1, 2); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(236097266981836096858595789980163391646, 2763); let v2 = copy v1; dec_amount(&mut v1, 2763); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(80785092697390026656967090626201965890, 38545900073420374); let v2 = copy v1; dec_amount(&mut v1, 6); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(76467322728589618756836558753150687192, 3038); let v2 = copy v1; add_amount(&mut v1, 3038); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(179842459088622608600579725798678784836, 3069728541917382); let v2 = copy v1; dec_amount(&mut v1, 5937); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(209223424877191390308059104886991754398, 2); let v2 = copy v1; add_amount(&mut v1, 7); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(142856642254244318505112450945639863263, 10734217030008643396); let v2 = copy v1; dec_amount(&mut v1, 9); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 24519202624248253); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(321836198525764218660354970461267257097, 8580); let v2 = copy v1; add_amount(&mut v1, 77322458988903592); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(330599797040153425687758422257800856090, 16417038633347802689); let v2 = copy v1; dec_amount(&mut v1, 2994); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(255032761086307463184816430990403180805, 84844031746294626); let v2 = copy v1; add_amount(&mut v1, 5190924720725149115); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(13191518767088908476091314422306324655, 6); let v2 = copy v1; add_amount(&mut v1, 3); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(163012223256199921082045391989230678570, 9978628320835056037); let v2 = copy v1; dec_amount(&mut v1, 71945142869613614); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(94757939274773102833173760152332037991, 6218); let v2 = copy v1; dec_amount(&mut v1, 8); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(189623440897176048287679720195782430648, 1889391271500581301); let v2 = copy v1; dec_amount(&mut v1, 7920); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(111974178931015097874838325505160384044, 37060332626582905); let v2 = copy v1; add_amount(&mut v1, 9289); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(180517817476772841526628604645627830318, 10583348945224941941); let v2 = copy v1; dec_amount(&mut v1, 8213540574035898338); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(75486439522375410203473114525342537640, 5838940755406270); let v2 = copy v1; add_amount(&mut v1, 1); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(219948378013149233794663291005441342494, 7); let v2 = copy v1; add_amount(&mut v1, 1954423310603047016); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(238266709240177653558942191552619266576, 391752959773578666); let v2 = copy v1; add_amount(&mut v1, 9470016916644797361); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 54545698644456963); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(280600211479059886422555506339879306094, 9); let v2 = copy v1; dec_amount(&mut v1, 9); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(156293072370262338934344264164333959004, 9027); let v2 = copy v1; add_amount(&mut v1, 8658200256026513021); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(201231969130937171147412694723715462497, 91364101969195790); let v2 = copy v1; dec_amount(&mut v1, 10949651971760881); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(133944277208023140037586590707442928907, 63022256082766939); let v2 = copy v1; add_amount(&mut v1, 45277965023956675); assert!(value(&v1) <= value(&v2), 0);
        // let v1 = vpt(286537171787257827253399858732212173999, 578305691139308913); let v2 = copy v1; add_amount(&mut v1, 578305691139308913); assert!(value(&v1) <= value(&v2), 0);

        let v1 = vpt(0, 0); let v2 = copy v1; add_amount(&mut v1, 0); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(0, 0); let v2 = copy v1; dec_amount(&mut v1, 0); assert!(value(&v1) <= value(&v2), 0);
        let v1 = vpt(0, 12); dec_amount(&mut v1, 12); assert!(v1.sum == 0 && v1.amount == 0, 0);
        let v1 = vpt(13, 12); dec_amount(&mut v1, 12); assert!(v1.sum == 0 && v1.amount == 0, 0);
    }

    /* 
        The following test case is generated by the following Python code
        
            import random

            U256_MAX = (2 ** 256 - 1)

            def random_vpt():
                sum_ = random.randrange(0, U256_MAX // 2)
                amount = random.choice([
                    random.randrange(1, min(sum_, 10000000000)),
                    random.randrange(1, U256_MAX // 2)
                ])
                if (random.random() > 0.9):
                    return (0, 0)
                return (sum_, amount)

            def random_vpt_small():
                sum_ = random.randrange(0, 2 ** 128)
                amount = random.choice([
                    random.randrange(1, min(sum_, 10 ** 17)),
                    random.randrange(1, min(sum_, 10)),
                    random.randrange(1, min(sum_, 10000)),
                    random.randrange(1, min(sum_, 2 ** 64)),
                ])
                if (random.random() > 0.9):
                    return (0, 0)
                return (sum_, amount)

            def once() -> bool:
                from fractions import Fraction
                v1 = random_vpt_small()
                v2 = random_vpt_small()

                if v1[1] != 0 and v2[1] != 0:
                    v1 = Fraction(v1[0], v1[1])
                    v2 = Fraction(v2[0], v2[1])

                    v3 = v1 - v2
                    if (v3 < Fraction(0, 1)):
                        v3 = Fraction(0, 1)

                    print(
                        f"let v1 = vpt({v1.numerator}, {v1.denominator}); let v2 = vpt({v2.numerator}, {v2.denominator}); assert!(diff(&v1, &v2) == {v3.numerator // v3.denominator}, 0);"
                    )
                    return True
                elif v2[1] == 0 and v1[1] > 0:
                    print(
                        f"let v1 = vpt({v1[0]}, {v1[1]}); let v2 = zero(); assert!(diff(&v1, &v2) == {v1[0] // v1[1]}, 0);"
                    )
                else:
                    return False


                return True

            for _ in range(70):
                while (not once()):
                    pass

    */
    #[test] fun t_vpt_diff_value() {
        let v1 = vpt(3236873322325895, 268); let v2 = vpt(132052911642061851403580966937814523385, 9356); assert!(diff(&v1, &v2, (95462920604836176 as u256)) == 0, 0);
        let v1 = vpt(62316695348335839, 47783643089183227); let v2 = vpt(2067103332941597, 875); assert!(diff(&v1, &v2, (18919975294674666 as u256)) == 0, 0);
        let v1 = vpt(43846085650777443, 252142859853292); let v2 = vpt(2313039551856423, 812935311601535); assert!(diff(&v1, &v2, (88745730100846601 as u256)) == 15179826566507900835, 0);
        let v1 = vpt(81399068369506077142658430468797345927, 7); let v2 = vpt(42083962420835132388528804117222500320, 3); assert!(diff(&v1, &v2, (87609922828042362 as u256)) == 0, 0);
        let v1 = vpt(203285236829130027037946045356944114509, 9); let v2 = vpt(153989170894515482691722426835354321751, 4); assert!(diff(&v1, &v2, (55550899822376071 as u256)) == 0, 0);
        let v1 = vpt(34848710189246893411307172750865302982, 77824384589739987); let v2 = vpt(252119022842919266186879110135564679486, 9775); assert!(diff(&v1, &v2, (54980245956756116 as u256)) == 0, 0);
        let v1 = vpt(5701038081284524, 1309615830497347); let v2 = vpt(8856950188457661, 8); assert!(diff(&v1, &v2, (59273640891772376 as u256)) == 0, 0);
        let v1 = vpt(18087010701522102, 1); let v2 = vpt(1337700883641571, 6504); assert!(diff(&v1, &v2, (63975942837511306 as u256)) == 1157120404581629582493988833859981, 0);
        let v1 = vpt(303355243795684118808984251940290317477, 6912); let v2 = vpt(26201737250762906017051911361424027011, 11393368435837495); assert!(diff(&v1, &v2, (33326370889989824 as u256)) == 1462634456909392886761538457261312027382748952309820, 0);
        let v1 = vpt(97104773947581880, 62042675556464157); let v2 = vpt(160073253876031158500670194602704039935, 1); assert!(diff(&v1, &v2, (64354157704743948 as u256)) == 0, 0);
        let v1 = vpt(57503001820517529, 8); let v2 = zero(); assert!(diff(&v1, &v2, (40393248069896646 as u256)) == 290341627162485374928782657663466, 0);
        // let v1 = vpt(16121891541377058784519052900909973111, 2729); let v2 = vpt(16169706923935227, 2468022877941643); assert!(diff(&v1, &v2, (3936056437113680 as u256)) == 23252720769470780763414202331401347885642800049561, 0);
        // let v1 = vpt(51396616584655026340147139479939601507, 56146452975531678); let v2 = vpt(294549642394293299483582290834627067220, 80588073503682191); assert!(diff(&v1, &v2, (11952524429277361 as u256)) == 0, 0);
        // let v1 = vpt(19504509828777563, 7025445047022821); let v2 = vpt(150646711768904456343689428412639948873, 4388752971375719670); assert!(diff(&v1, &v2, (46902108517436262 as u256)) == 0, 0);
        // let v1 = vpt(13305672796680935304080371988070291071, 5742751026673137); let v2 = vpt(20924812766539733, 10408810282734405); assert!(diff(&v1, &v2, (25355735461358668 as u256)) == 58747996909677049099860360378987139524, 0);
        // let v1 = vpt(38016372702880307, 15822942433002667); let v2 = vpt(147441804209680249089850784880578439681, 5995395828026474570); assert!(diff(&v1, &v2, (4897249507933218 as u256)) == 0, 0);
        // let v1 = vpt(23038110001740831, 10292480341568131); let v2 = vpt(24932777287622502, 2927); assert!(diff(&v1, &v2, (18072440932244963 as u256)) == 0, 0);
        // let v1 = vpt(68589312311484820, 43323558530229717); let v2 = vpt(29598598651907449751385545123546603695, 789); assert!(diff(&v1, &v2, (46404498181047553 as u256)) == 0, 0);
        // let v1 = vpt(42984933084218209, 10490125383658300); let v2 = vpt(278598653367351724041013419427907270019, 17285615268090546713); assert!(diff(&v1, &v2, (2215803159518798 as u256)) == 0, 0);
        // let v1 = vpt(41173587492516843, 3938); let v2 = vpt(213093510443213768458828823973548192277, 12698528487869182072); assert!(diff(&v1, &v2, (80250678894431466 as u256)) == 0, 0);
        // let v1 = vpt(80190141259777043, 34608760342511426); let v2 = vpt(74956667627435698257345843188976307539, 301); assert!(diff(&v1, &v2, (53083031390798729 as u256)) == 0, 0);
        // let v1 = vpt(36245381091831640, 9); let v2 = vpt(56152645164928707375230256419815986649, 35931655907946316); assert!(diff(&v1, &v2, (35289688687098682 as u256)) == 0, 0);
        // let v1 = vpt(30833793276305116, 4845); let v2 = vpt(40471746421392309, 111433136388169); assert!(diff(&v1, &v2, (35545471649589478 as u256)) == 226212946272375200502605640093, 0);
        // let v1 = vpt(92175250273102525572553372601678343998, 28249373214837447); let v2 = vpt(129394880518668906265398178552804836425, 80517617762356693); assert!(diff(&v1, &v2, (65566594105881148 as u256)) == 108570083954879354123708212382088172511, 0);
        // let v1 = vpt(174269756125482451789160187987183692814, 74926633493137687); let v2 = vpt(100682842916851099980905218228064004961, 6141129815077643639); assert!(diff(&v1, &v2, (68772324120073253 as u256)) == 158828109228111223961935708402630489881, 0);
        // let v1 = vpt(5324722616226686, 3234946662964227); let v2 = vpt(27482289938592761, 5); assert!(diff(&v1, &v2, (39174002273651837 as u256)) == 0, 0);
        // let v1 = vpt(92053937993280105358692446907423993983, 3); let v2 = vpt(7174785223224425, 7062253178371859); assert!(diff(&v1, &v2, (64328600319672592 as u256)) == 1973900328340546515898770934058406457619121701789036864, 0);
        // let v1 = vpt(324816310923852452484845840995057361703, 36581229806451185); let v2 = vpt(15913655803704212, 15424940904179519); assert!(diff(&v1, &v2, (45292945951063057 as u256)) == 402170394285193395388648441922940483982, 0);
        // let v1 = vpt(73834819502013818861659442815150277355, 7); let v2 = vpt(14819845204195049, 7187); assert!(diff(&v1, &v2, (53235153831987173 as u256)) == 561515424906673171665781495056594042381276070929045655, 0);
        // let v1 = vpt(3585111714025019, 202885221860462); let v2 = vpt(207823028324917116115438520896957265013, 33697354751543972); assert!(diff(&v1, &v2, (28520645466474900 as u256)) == 0, 0);
        // let v1 = vpt(12165252337889443694056920849066641208, 1); let v2 = vpt(94039394324132189, 84592825999465954); assert!(diff(&v1, &v2, (72504787901263521 as u256)) == 882039040524024300485811944474423228358971842249918018, 0);
        // let v1 = vpt(237084637579898300611165517519677560353, 3814); let v2 = vpt(48118799533091308, 27014696799243787); assert!(diff(&v1, &v2, (44927561097879998 as u256)) == 2792772559056008685541595850415878767794689429042858, 0);
        // let v1 = vpt(53204048158686483439445543769774428604, 1); let v2 = vpt(99924732984268234176463181951093596873, 16424267789025179524); assert!(diff(&v1, &v2, (78692146331436143 as u256)) == 4186740743128132436265970342773517431612935081310482707, 0);
        // let v1 = vpt(40948737627633468, 1999); let v2 = vpt(90259153402932700362999292327950511469, 7); assert!(diff(&v1, &v2, (68256560015972380 as u256)) == 0, 0);
        // let v1 = vpt(6185758694820116194894777675574600647, 1); let v2 = vpt(330216055055464452224714671452309708099, 7093); assert!(diff(&v1, &v2, (24622015250604937 as u256)) == 151159562001549419398663311114954639082932628440023918, 0);
        // let v1 = vpt(58785325374183499471668238308666700355, 7243); let v2 = zero(); assert!(diff(&v1, &v2, (52166861380473461 as u256)) == 423394438768612426695955614944135983131180648145351, 0);
        // let v1 = vpt(45253153339509303, 30856281048086419); let v2 = vpt(82567576261436193, 4); assert!(diff(&v1, &v2, (62196328222069631 as u256)) == 0, 0);
        // let v1 = vpt(8793875280971351, 3381057708726903); let v2 = vpt(93483555854336440076602665775971685512, 52307626603108735); assert!(diff(&v1, &v2, (82766475273755804 as u256)) == 0, 0);
        // let v1 = vpt(23602769479393241, 2); let v2 = vpt(117452634428276527560676347504657344518, 15174463053931263871); assert!(diff(&v1, &v2, (98802315682195826 as u256)) == 0, 0);
        // let v1 = vpt(13726892758169956, 5); let v2 = vpt(36092959080213784922911220375223022247, 578); assert!(diff(&v1, &v2, (137022660308631 as u256)) == 0, 0);
        // let v1 = vpt(63247398227907277, 48269504398682785); let v2 = vpt(15420976333374206, 1999919828815635); assert!(diff(&v1, &v2, (26831840102832019 as u256)) == 0, 0);
        // let v1 = vpt(22718698728649426587570244959777715251, 219582392445904640); let v2 = vpt(194592255639998036683473393149669224293, 9621735641278816714); assert!(diff(&v1, &v2, (77266338667024808 as u256)) == 6431570569369229771911893600997522943, 0);
        // let v1 = vpt(10170663045554898777958933195242850023, 3247488648918844); let v2 = vpt(178577558962273943986187107904606859989, 6); assert!(diff(&v1, &v2, (82549591642922670 as u256)) == 0, 0);
        // let v1 = vpt(172878672404428583835972864873136475516, 1593809076888231); let v2 = vpt(23788376163289492, 1); assert!(diff(&v1, &v2, (3175610612612959 as u256)) == 344454824823367940572395086644022111247, 0);
        // let v1 = vpt(50743796790980372, 24025275229042375); let v2 = vpt(39961105590265135, 36766670230376519); assert!(diff(&v1, &v2, (18926101143226979 as u256)) == 19403351942977882, 0);
        // let v1 = vpt(55879145082180016, 7785433847139217); let v2 = vpt(16647625264570061, 13040593105641856); assert!(diff(&v1, &v2, (45103695233184961 as u256)) == 266147709504729618, 0);
        // let v1 = vpt(82166667737768701, 27427371021767158); let v2 = vpt(13577396977557199, 9143462685804687); assert!(diff(&v1, &v2, (4621607260464527 as u256)) == 6982608135416429, 0);
        // let v1 = vpt(8826894207775650, 1919); let v2 = vpt(9823704543530737, 3674359281640081); assert!(diff(&v1, &v2, (99644835542732012 as u256)) == 458339980034594672222205685303, 0);
        // let v1 = vpt(285426161517254451349356900879816474369, 14049932639030256571); let v2 = vpt(15433141825773849046650356823255219509, 1609596874738128157); assert!(diff(&v1, &v2, (27475841761532059 as u256)) == 294731253693095068381629818075345837, 0);
        // let v1 = vpt(35240814771901210151202410432989660108, 2830696981063762003); let v2 = vpt(318553722615724051696585330941397203622, 75186525248251675); assert!(diff(&v1, &v2, (19563147354338552 as u256)) == 0, 0);
        // let v1 = vpt(337378762690052483931513212041119464875, 12508013618052795164); let v2 = vpt(50336177532636554, 1859764570304897); assert!(diff(&v1, &v2, (463524930554484 as u256)) == 12502662079033581918050221903154668, 0);
        // let v1 = vpt(67549130934444601, 5); let v2 = vpt(98032916351194261, 8652); assert!(diff(&v1, &v2, (93432879308979302 as u256)) == 1261203302919518952067486810834671, 0);
        // let v1 = vpt(191606832932329157665747995758081327334, 98745072038609759); let v2 = vpt(49832594743994295008989009768961547107, 90498279444538712); assert!(diff(&v1, &v2, (38685127724039303 as u256)) == 53763519614175370491882412980406847918, 0);
        // let v1 = vpt(318567089135841891342962672370837962915, 4102); let v2 = zero(); assert!(diff(&v1, &v2, (20521151795396167 as u256)) == 1593701509793786590777794363556432438164903326591698, 0);
        // let v1 = vpt(133662981989413170127029888352861801321, 8); let v2 = vpt(94096884709188233, 2858); assert!(diff(&v1, &v2, (67902702374902506 as u256)) == 1134509710571134569159357214862410500796411560895669896, 0);
        // let v1 = vpt(885400780567401, 544983535075237); let v2 = vpt(85431267994859892881558491929660258811, 58540397314886038); assert!(diff(&v1, &v2, (39420216752317874 as u256)) == 0, 0);
        // let v1 = vpt(66398134592951143, 6); let v2 = vpt(74434997719883249, 9728); assert!(diff(&v1, &v2, (49180294154317434 as u256)) == 543870322646929228920923659584780, 0);
        // let v1 = vpt(75741037467567496, 5); let v2 = vpt(13511445011338307119916720719705225505, 1); assert!(diff(&v1, &v2, (15778504002836453 as u256)) == 0, 0);
        // let v1 = vpt(6573410099049941, 5215502510842878); let v2 = vpt(705104466657574277249199208185217982, 1); assert!(diff(&v1, &v2, (39842263994953870 as u256)) == 0, 0);
        // let v1 = vpt(8497412817781399605469099704863638024, 2194033944757545749); let v2 = vpt(57584715087484923, 9859); assert!(diff(&v1, &v2, (19957209151489594 as u256)) == 77293420872143345663591158026731275, 0);
        // let v1 = vpt(60528332507190681014395287187000095236, 5833437610965416185); let v2 = vpt(25672813297978868946638244217198418969, 3627951222538170053); assert!(diff(&v1, &v2, (2313839759363056 as u256)) == 7634990480319269280854352883085251, 0);
        // let v1 = vpt(16158803855420334051986884869853235245, 2427); let v2 = vpt(16518523281727489, 9); assert!(diff(&v1, &v2, (87000145042138746 as u256)) == 579241153328817399839774610970439673143165080586344, 0);
        // let v1 = vpt(52605884641430300657709875820896974957, 954936349409677533); let v2 = vpt(48026579976243169417471263423255812831, 3033908929268031559); assert!(diff(&v1, &v2, (78468055766928855 as u256)) == 3080532908062565822245093352064652344, 0);
        // let v1 = vpt(47676472846634789, 7716403806180716); let v2 = vpt(74954123737424425, 29817373387088862); assert!(diff(&v1, &v2, (21817539801867748 as u256)) == 79957215612029393, 0);
        // let v1 = vpt(51154227048396182433783783731412496607, 13371814648468407556); let v2 = vpt(101790638547706326321298711595311932467, 12086564445932036453); assert!(diff(&v1, &v2, (67979390942680815 as u256)) == 0, 0);
        // let v1 = vpt(37712408118734, 9796170161373); let v2 = vpt(81717243737109161, 41434069703330656); assert!(diff(&v1, &v2, (87701322998229885 as u256)) == 164657999957437259, 0);
        // let v1 = vpt(45760596552955800, 2191); let v2 = vpt(138881518764030394842791168282742437025, 8); assert!(diff(&v1, &v2, (22454698588119144 as u256)) == 0, 0);
        // let v1 = vpt(326828813633514618475864772033866248668, 2397); let v2 = vpt(76277487737967041, 66878778579549060); assert!(diff(&v1, &v2, (20436712697298597 as u256)) == 2786527561713427205425674985069905137929488617676241, 0);
        // let v1 = vpt(69829828494076205, 2291021627871209); let v2 = vpt(133577040991006545400024959011599360847, 41185613752893957); assert!(diff(&v1, &v2, (40117725786983074 as u256)) == 0, 0);
        // let v1 = vpt(308998156247936234753254404898612064111, 2); let v2 = vpt(40040220141565121, 7005583802895715); assert!(diff(&v1, &v2, (45861421395392070 as u256)) == 7085547327042902334114386235127454288414843259977755958, 0);

        let v1 = vpt(0, 0); let v2 = vpt(0, 0); assert!(diff(&v1, &v2, (112 as u256)) == 0, 0);
        let v1 = vpt(0, 0); let v2 = vpt(0, 1); assert!(diff(&v1, &v2, (123 as u256)) == 0, 0);
        let v1 = vpt(0, 3); let v2 = vpt(0, 1); assert!(diff(&v1, &v2, (456 as u256)) == 0, 0);
    }
}